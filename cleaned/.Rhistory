for (file in  files){
loopdata <- read.csv(file=file,sep=",",header=TRUE)
loopdata <- loopdata[-1]
OTU.count.distance<-as.matrix(vegdist(t(loopdata), method="bray", upper=FALSE, binary=F))
OTU.count.distance[lower.tri(OTU.count.distance)] <- NA
pairwise <- melt(OTU.count.distance)
pairwise <- pairwise[!is.na(pairwise$value),]
pairwise <- pairwise[pairwise$value>0,]
BdivOTUresults[,count] <- pairwise$value
count <- count+1
}
#Plotting bray-curtis values for each OTU generating method against each other tests community similarity across methods
pdf(file="../figures/OTUclusting_BC_COI.pdf")
plot(BdivOTUresults[,1:3])
dev.off()
pdf(file="../figures/OTUclusting_BC_18S.pdf")
plot(BdivOTUresults[,4:6])
dev.off()
##Overall it seems that b diversity information is similar regardless of OTU generation used. We dont want to use 0.97 becuase we know it doesnt represent the biological reality, we dont want to use swarm becuase it generates many more OTUs than possible as it isnt able to deal with errors in Illumina data. unoise3 is best as it attempts to recreate biological seqs.
#Now we can start dealing with variables of interest to our study.
#### Longmire's or Freezing ####
#First we need to rarefy our data to make sensible comparisons between sites/conditions
#Read in data
Preserv18S <- read.table(file="Cleaned.Zhanlulu.unoise3.csv",row.names = 1,sep=",",header=TRUE)
#Rarefy
rPreserv18S<-
Preserv18S%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rarecurve(.,step=100)
rPreserv18S<-
Preserv18S%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rrarefy(.,min(rowSums(.)))%>%
t(.)
rPreserv18S <- as.data.frame(rPreserv18S,row.names = row.names(Preserv18S))
rPreserv18SOTU <- data.frame("sample"=names(rPreserv18S),"OTUnum"=unname(apply(rPreserv18S,2,counter)))
#get rid of leading makrer name
rPreserv18SOTU$sample <- rPreserv18SOTU$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreserv18SOTU <- rPreserv18SOTU[-grep("S.[0-9][0-9]",rPreserv18SOTU$sample),]
#Turn names into conds
rPreserv18SOTU <-separate(rPreserv18SOTU,sample,into=c('site','cond'),sep=4)
rPreserv18SOTU$rep <- substr(rPreserv18SOTU$site,3,3)
rPreserv18SOTU$site <- substr(rPreserv18SOTU$site,1,2)
rPreserv18SOTU$site <- as.factor(rPreserv18SOTU$site)
rPreserv18SOTU$rep <- as.factor(rPreserv18SOTU$rep)
rPreserv18SOTU$cond <- as.factor(rPreserv18SOTU$cond)
#Now the same for COI
PreservCOI <- read.table(file="~/Desktop/AnalysisUKMarinaData/cleaned/Cleaned.Leraylulu.unoise3.csv",row.names = 1,sep=",",header=TRUE)
minimumCOI <- min(colSums(PreservCOI))
#Rarefy
rPreservCOI<-
PreservCOI%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rarecurve(.,step=100)
rPreservCOI<-
PreservCOI%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rrarefy(.,min(rowSums(.)))%>%
t(.)
rPreservCOI <- as.data.frame(rPreservCOI,row.names = row.names(PreservCOI))
rPreservCOIOTU <- data.frame("sample"=names(rPreservCOI),"OTUnum"=unname(apply(rPreservCOI,2,counter)))
#get rid of leading makrer name
rPreservCOIOTU$sample <- rPreservCOIOTU$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreservCOIOTU <- rPreservCOIOTU[-grep("S.[0-9][0-9]",rPreservCOIOTU$sample),]
#Turn names into conds
rPreservCOIOTU <-separate(rPreservCOIOTU,sample,into=c('site',"cond"))
rPreservCOIOTU$rep <- substr(rPreservCOIOTU$site,3,3)
rPreservCOIOTU$site <- strsplit(rPreservCOIOTU$site,"[0-9]")
rPreservCOIOTU$site <- unlist(rPreservCOIOTU$site)
rPreservCOIOTU$site <- as.factor(rPreservCOIOTU$site)
rPreservCOIOTU$rep <- as.factor(rPreservCOIOTU$rep)
rPreservCOIOTU$cond <- as.factor(rPreservCOIOTU$cond)
pdf(file="../figures/Preserv_all.pdf",width=8,height=4)
par(mfrow=c(1,2))
boxplot(rPreserv18SOTU$OTUnum~rPreserv18SOTU$cond+rPreserv18SOTU$site,xlab="Condition-Site",ylab="OTUs",main="18S", col = rep(c("#E69F00","#0072B2"),4),las=2)
boxplot(rPreservCOIOTU$OTUnum~rPreservCOIOTU$cond+rPreservCOIOTU$site,xlab="Condition-Site",ylab="OTUs",main="COI", col = rep(c("#E69F00","#0072B2"),4),las=2)
dev.off()
#Brilliant now lets see how this pattern interacts with taxonomy
#Read in the taxonomy
strict18Staxonomy <- read.table(file="../taxonomy/18S_SILVA_results.txt",sep="\t")
relaxed18Staxonomy <- read.table(file = "../taxonomy/18SMEGAN_met.txt",sep=",")
strictCOItaxonomy <- read.table(file="../taxonomy/COI_MIDORI_results.txt")
relaxedCOItaxonomy <- read.table(file="../taxonomy/COIMEGAN_met.txt",sep=",")
#Now lets subset the data by the taxonomy
rPreserv18Smet <-rPreserv18S[row.names(rPreserv18S) %in% unique(c(as.character(strict18Staxonomy$V1),as.character(relaxed18Staxonomy$V1))),]
rPreservCOImet <-rPreservCOI[row.names(rPreservCOI) %in% unique(c(as.character(strictCOItaxonomy$V1),as.character(relaxedCOItaxonomy$V1))),]
rPreserv18SOTUmet <- data.frame("sample"=names(rPreserv18Smet),"OTUnum"=unname(apply(rPreserv18Smet,2,counter)))
#get rid of leading makrer name
rPreserv18SOTUmet$sample <- rPreserv18SOTUmet$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreserv18SOTUmet <- rPreserv18SOTUmet[-grep("S.[0-9][0-9]",rPreserv18SOTUmet$sample),]
#Turn names into conds
rPreserv18SOTUmet <-separate(rPreserv18SOTUmet,sample,into=c('site',"cond"))
rPreserv18SOTUmet$rep <- substr(rPreserv18SOTUmet$site,3,3)
rPreserv18SOTUmet$site <- strsplit(rPreserv18SOTUmet$site,"[0-9]")
rPreserv18SOTUmet$site <- unlist(rPreserv18SOTUmet$site)
rPreserv18SOTUmet$site <- as.factor(rPreserv18SOTUmet$site)
rPreserv18SOTUmet$rep <- as.factor(rPreserv18SOTUmet$rep)
rPreserv18SOTUmet$cond <- as.factor(rPreserv18SOTUmet$cond)
rPreservCOIOTUmet <- data.frame("sample"=names(rPreservCOImet),"OTUnum"=unname(apply(rPreservCOImet,2,counter)))
#get rid of leading makrer name
rPreservCOIOTUmet$sample <- rPreservCOIOTUmet$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreservCOIOTUmet <- rPreservCOIOTUmet[-grep("S.[0-9][0-9]",rPreservCOIOTUmet$sample),]
#Turn names into conds
rPreservCOIOTUmet <-separate(rPreservCOIOTUmet,sample,into=c('site',"cond"))
rPreservCOIOTUmet$rep <- substr(rPreservCOIOTUmet$site,3,3)
rPreservCOIOTUmet$site <- strsplit(rPreservCOIOTUmet$site,"[0-9]")
rPreservCOIOTUmet$site <- unlist(rPreservCOIOTUmet$site)
rPreservCOIOTUmet$site <- as.factor(rPreservCOIOTUmet$site)
rPreservCOIOTUmet$rep <- as.factor(rPreservCOIOTUmet$rep)
rPreservCOIOTUmet$cond <- as.factor(rPreservCOIOTUmet$cond)
pdf(file="../figures/Preserv_met.pdf",width=8,height=4)
par(mfrow=c(1,2))
boxplot(rPreserv18SOTUmet$OTUnum~rPreserv18SOTUmet$cond+rPreserv18SOTUmet$site,xlab="Condition-Site",ylab="MetazoanOTUs",main="18S", col = rep(c("#E69F00","#0072B2"),4),las=2)
boxplot(rPreservCOIOTUmet$OTUnum~rPreservCOIOTUmet$cond+rPreservCOIOTUmet$site,xlab="Condition-Site",ylab="MetazoanOTUs",main="COI", col = rep(c("#E69F00","#0072B2"),4),las=2)
dev.off()
##Statistics
##ALL data
#Parametric
#Significant difference in 18S
t.test(rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="L"],rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="N"],paired=TRUE)
#No difference in COI
t.test(rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="L"],rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="N"],paired=TRUE)
#Non-Parametric
#Significant difference in 18S
wilcox.test(rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="L"],rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="N"],paired=TRUE)
#No difference in COI
wilcox.test(rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="L"],rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="N"],paired=TRUE)
##Just metazoan
#Sig diff in 18S
t.test(rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="L"],rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="N"],paired=TRUE)
#No difference in COI
t.test(rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="L"],rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="N"],paired=TRUE)
#Non-Parametric
#Significant difference in 18S
wilcox.test(rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="L"],rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="N"],paired=TRUE)
#No difference in COI
wilcox.test(rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="L"],rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="N"],paired=TRUE)
#Lets see at what number of reads the difference is no longer siginificant
datasets <-c("rPreserv18S","rPreserv18Smet","rPreservCOI","rPreservCOImet")
Pbootresults <- as.data.frame(matrix(data=NA,ncol=5,nrow = length(1:200)))
names(Pbootresults) <- c("MinReads",datasets)
Pbootresults$MinReads <- 1:200
Pbootresultsdir <- Pbootresults
colcount <-2
for (dataset in names(Pbootresults[2:5])){
inputdataO <-get(dataset)
bootcount <- 1
for (minR in 1:200){
inputdata <- inputdataO
inputdata[inputdata< minR] <- 0
inputdata <- inputdata[rowSums(inputdata) > 0,]
inputdataOTU <- data.frame("sample"=names(inputdata),"OTUnum"=unname(apply(inputdata,2,counter)))
#get rid of leading makrer name
inputdataOTU$sample <- inputdataOTU$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
inputdataOTU <- inputdataOTU[-grep("S.[0-9][0-9]",inputdataOTU$sample),]
#Turn names into conds
inputdataOTU <-separate(inputdataOTU,sample,into=c('site',"cond"))
inputdataOTU$rep <- substr(inputdataOTU$site,3,3)
inputdataOTU$site <- strsplit(inputdataOTU$site,"[0-9]")
inputdataOTU$site <- unlist(inputdataOTU$site)
inputdataOTU$site <- as.factor(inputdataOTU$site)
inputdataOTU$rep <- as.factor(inputdataOTU$rep)
inputdataOTU$cond <- as.factor(inputdataOTU$cond)
item <-wilcox.test(inputdataOTU$OTUnum[inputdataOTU$cond=="L"],inputdataOTU$OTUnum[inputdataOTU$cond=="N"],paired=TRUE)
Pbootresults[bootcount,colcount] <- item$p.value
if(item$p.value<0.05){
Pbootresultsdir[bootcount,colcount] <-ifelse(mean(inputdataOTU$OTUnum[inputdataOTU$cond=="L"])>mean(inputdataOTU$OTUnum[inputdataOTU$cond=="N"]),"6","2")
}
bootcount <- bootcount+1
}
colcount <- colcount+1
}
#Lets plot these to examine how read truncation affects differences
pdf(file="../figures/Preserv_Wilcox_trunc.pdf",width=7,height=7)
plot(Pbootresults$MinReads,Pbootresults$rPreserv18S,type="l",col="darkgreen",ylim=c(-0.1,1),xlab="Number of normalised reads at truncation",ylab="Wilcoxon P Value")
points(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreserv18S)],rep(-0.02,length(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreserv18S)])),pch=as.numeric(Pbootresultsdir$rPreserv18S[!is.na(Pbootresultsdir$rPreserv18S)]),col="darkgreen",cex=0.3)
points(Pbootresults$MinReads,Pbootresults$rPreservCOI,type="l",col="darkblue")
points(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreservCOI)],rep(-0.06,length(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreservCOI)])),pch=as.numeric(Pbootresultsdir$rPreservCOI[!is.na(Pbootresultsdir$rPreservCOI)]),col="darkblue",cex=0.3)
abline(h=0.05,lty=3,col="red")
legend("topleft",legend=c("18S","COI"),col=c("darkgreen","darkblue"),lty = 1,bty="n")
dev.off()
##Lets make the permanova dataset
PERM18Slong <- rPreserv18S[,substr(names(rPreserv18S),7,7)=="L"]
PERM18Sfroz <- rPreserv18S[,substr(names(rPreserv18S),7,7)=="N"]
test <- rbind(t(PERM18Slong),t(PERM18Sfroz))
treatment <- c(rep("L",12),rep("N",12))
sites <- rep(c(rep("1",3),rep("2",3),rep("3",3),rep("4",3)),2)
PERMresults.18S.P <- adonis(test~treatment*sites,method="bray",perm=999)
PERMresults.18S.S <- adonis(test~sites,method="bray",perm=9999)
#We see highly significant differences between sites and no difference between treatments
##Lets make the permanova dataset
PERMCOIlong <- rPreservCOI[,substr(names(rPreservCOI),7,7)=="L"]
PERMCOIfroz <- rPreservCOI[,substr(names(rPreservCOI),7,7)=="N"]
test <- rbind(t(PERMCOIlong),t(PERMCOIfroz))
treatment <- c(rep("L",12),rep("N",12))
sites <- rep(c(rep("1",3),rep("2",3),rep("3",3),rep("4",3)),2)
PERMresults.COI.P <- adonis(test~treatment*sites,method="bray",perm=999)
PERMresults.COI.S <- adonis(test~sites,method="bray",perm=9999)
#Groups not significantly different
#### Sediment or Water ####
##Now we have moved on from comparing longmires and frozen lets re-rarefy the COI data without the longmires sampes
##The limiting sample in the 18S dataset is a longmires sample so no need to rarefy there!
minimumCOI <- min(colSums(PreservCOI[names(PreservCOI)[-grep("L$",names(PreservCOI))]]))
#Rarefy for no longmires
rPreservCOI<-
PreservCOI%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rrarefy(.,minimumCOI)%>%
t(.)
rPreservCOI <- as.data.frame(rPreservCOI,row.names = row.names(PreservCOI))
#18S
#First lets compare sediment and water OTU number!
palette(c("#CC79A7","#56B4E9","#0072B2","#F0E442","#E69F00", "#00b886","#007857"))
rSedWater18S <- data.frame("HH.W"=rowSums(rPreserv18S[grep("Z.HH[123].N",colnames(rPreserv18S))]),"PQ.W"=rowSums(rPreserv18S[grep("Z.PQ[123].N",colnames(rPreserv18S))]),"PQ.S"=rowSums(rPreserv18S[grep("Z.S.0[123]",colnames(rPreserv18S))]),"TB.W"=rowSums(rPreserv18S[grep("Z.TB[123].N",colnames(rPreserv18S))]),"TB.S"=rowSums(rPreserv18S[grep("Z.S.0[456]",colnames(rPreserv18S))]),"TQ.W"=rowSums(rPreserv18S[grep("Z.TQ[123].N",colnames(rPreserv18S))]),"TQ.S"=rowSums(rPreserv18S[grep("Z.S.0[789]",colnames(rPreserv18S))]))
rSedWater18SOTU <- data.frame("sample"=names(rSedWater18S),"OTUnum"=unname(apply(rSedWater18S,2,counter)))
#Turn names into conds
rSedWater18SOTU$site <- substr(rSedWater18SOTU$sample,1,2)
rSedWater18SOTU$cond <- as.factor(substr(rSedWater18SOTU$sample,4,4))
#Check the overlap of OTUs
overlap18S <- rSedWater18S[-1]
overlap18S[overlap18S>0] <- 1
PQ.18S.overlap <- table(as.factor(overlap18S$PQ.W),as.factor(overlap18S$PQ.S))[2,2]
TQ.18S.overlap <- table(as.factor(overlap18S$TQ.W),as.factor(overlap18S$TQ.S))[2,2]
TB.18S.overlap <- table(as.factor(overlap18S$TB.W),as.factor(overlap18S$TB.S))[2,2]
#now we plot the barplots
pdf(file="../figures/SedWater18S.pdf",width=3,height=6)
linemar<- max(rSedWater18SOTU$OTUnum)/250
barplot(rSedWater18SOTU$OTUnum,names.arg = rSedWater18SOTU$sample,col=1:7,las=2,ylim=c(0,1000),ylab="Number of OTUs")
rect(1.3,PQ.18S.overlap-linemar,3.7,PQ.18S.overlap+linemar,col="white",lty=0,border=FALSE)
rect(3.75,TB.18S.overlap-linemar,6.1,TB.18S.overlap+linemar,col="white",lty=0,border=FALSE)
rect(6.2,TQ.18S.overlap-linemar,9,TQ.18S.overlap+linemar,col="white",lty=0,border=FALSE)
dev.off()
#COI
#First lets compare sediment and water OTU number!
palette(c("#CC79A7","#56B4E9","#0072B2","#F0E442","#E69F00", "#00b886","#007857"))
rSedWaterCOI <- data.frame("HH.W"=rowSums(rPreservCOI[grep("L.HH[123].N",colnames(rPreservCOI))]),"PQ.W"=rowSums(rPreservCOI[grep("L.PQ[123].N",colnames(rPreservCOI))]),"PQ.S"=rowSums(rPreservCOI[grep("L.S.0[123]",colnames(rPreservCOI))]),"TB.W"=rowSums(rPreservCOI[grep("L.TB[123].N",colnames(rPreservCOI))]),"TB.S"=rowSums(rPreservCOI[grep("L.S.0[456]",colnames(rPreservCOI))]),"TQ.W"=rowSums(rPreservCOI[grep("L.TQ[123].N",colnames(rPreservCOI))]),"TQ.S"=rowSums(rPreservCOI[grep("L.S.0[789]",colnames(rPreservCOI))]))
rSedWaterCOIOTU <- data.frame("sample"=names(rSedWaterCOI),"OTUnum"=unname(apply(rSedWaterCOI,2,counter)))
#Turn names into conds
rSedWaterCOIOTU$site <- substr(rSedWaterCOIOTU$sample,1,2)
rSedWaterCOIOTU$cond <- as.factor(substr(rSedWaterCOIOTU$sample,4,4))
#Check the overlap of OTUs
overlapCOI <- rSedWaterCOI[-1]
overlapCOI[overlapCOI>0] <- 1
PQ.COI.overlap <- table(as.factor(overlapCOI$PQ.W),as.factor(overlapCOI$PQ.S))[2,2]
TQ.COI.overlap <- table(as.factor(overlapCOI$TQ.W),as.factor(overlapCOI$TQ.S))[2,2]
TB.COI.overlap <- table(as.factor(overlapCOI$TB.W),as.factor(overlapCOI$TB.S))[2,2]
#now we plot the barplots
pdf(file="../figures/SedWaterCOI.pdf",width=3,height=6)
linemar<- max(rSedWaterCOIOTU$OTUnum)/250
barplot(rSedWaterCOIOTU$OTUnum,names.arg = rSedWaterCOIOTU$sample,col=1:7,las=2,ylim=c(0,3000),ylab="Number of OTUs")
rect(1.3,PQ.COI.overlap-linemar,3.7,PQ.COI.overlap+linemar,col="white",lty=0,border=FALSE)
rect(3.75,TB.COI.overlap-linemar,6.1,TB.COI.overlap+linemar,col="white",lty=0,border=FALSE)
rect(6.2,TQ.COI.overlap-linemar,9,TQ.COI.overlap+linemar,col="white",lty=0,border=FALSE)
dev.off()
#proportion of unique OTUs
##THIS IS SHAMEFUL CODE
UniqueOTUprop <- cbind(rSedWater18SOTU[,1:2],rSedWaterCOIOTU[,2])[-1,]
UniqueOTUprop$unique18<- rep("NA",6)
UniqueOTUprop$unique18S[1] <- (UniqueOTUprop$OTUnum[1]-PQ.18S.overlap)/UniqueOTUprop$OTUnum[1]
UniqueOTUprop$unique18S[2] <- (UniqueOTUprop$OTUnum[2]-PQ.18S.overlap)/UniqueOTUprop$OTUnum[2]
UniqueOTUprop$unique18S[3] <- (UniqueOTUprop$OTUnum[3]-TB.18S.overlap)/UniqueOTUprop$OTUnum[3]
UniqueOTUprop$unique18S[4] <- (UniqueOTUprop$OTUnum[4]-TB.18S.overlap)/UniqueOTUprop$OTUnum[4]
UniqueOTUprop$unique18S[5] <- (UniqueOTUprop$OTUnum[5]-TQ.18S.overlap)/UniqueOTUprop$OTUnum[5]
UniqueOTUprop$unique18S[6] <- (UniqueOTUprop$OTUnum[6]-TQ.18S.overlap)/UniqueOTUprop$OTUnum[6]
UniqueOTUprop$uniqueCOI<- rep("NA",6)
UniqueOTUprop$uniqueCOI[1] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[1]-PQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[1]
UniqueOTUprop$uniqueCOI[2] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[2]-PQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[2]
UniqueOTUprop$uniqueCOI[3] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[3]-TB.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[3]
UniqueOTUprop$uniqueCOI[4] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[4]-TB.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[4]
UniqueOTUprop$uniqueCOI[5] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[5]-TQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[5]
UniqueOTUprop$uniqueCOI[6] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[6]-TQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[6]
mean(c(as.numeric(UniqueOTUprop$uniqueCOI[substr(UniqueOTUprop$sample,4,4)=="S"]),UniqueOTUprop$unique18S[substr(UniqueOTUprop$sample,4,4)=="S"]))
mean(c(as.numeric(UniqueOTUprop$uniqueCOI[substr(UniqueOTUprop$sample,4,4)=="W"]),UniqueOTUprop$unique18S[substr(UniqueOTUprop$sample,4,4)=="W"]))
##Now lets generate a dataset where the reps are not summed
##18S
rSedWater18SOTU_r <- data.frame("sample"=names(rPreserv18S),"OTUnum"=unname(apply(rPreserv18S,2,counter)))
#get rid of leading makrer name
rSedWater18SOTU_r$sample <- rSedWater18SOTU_r$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#annotate sediment samples with their real names
rSedWater18SOTU_r$sample[rSedWater18SOTU_r$sample %in% sedimentID$ID] <- as.character(sedimentID$Code[sedimentID$ID==rSedWater18SOTU_r$sample[rSedWater18SOTU_r$sample %in% sedimentID$ID]])
rSedWater18SOTU_r <-separate(rSedWater18SOTU_r,sample,into=c('site',"cond"))
rSedWater18SOTU_r$rep <- substr(rSedWater18SOTU_r$site,3,3)
rSedWater18SOTU_r$site <- substr(rSedWater18SOTU_r$site,1,2)
rSedWater18SOTU_r$site <- as.factor(rSedWater18SOTU_r$site)
rSedWater18SOTU_r$rep <- as.factor(rSedWater18SOTU_r$rep)
rSedWater18SOTU_r$cond <- as.factor(rSedWater18SOTU_r$cond)
rSedWater18SOTU_r <- rSedWater18SOTU_r[rSedWater18SOTU_r$site!="HH",]
##COI
rSedWaterCOIOTU_r <- data.frame("sample"=names(rPreservCOI),"OTUnum"=unname(apply(rPreservCOI,2,counter)))
#get rid of leading makrer name
rSedWaterCOIOTU_r$sample <- rSedWaterCOIOTU_r$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#annotate sediment samples with their real names
rSedWaterCOIOTU_r$sample[rSedWaterCOIOTU_r$sample %in% sedimentID$ID] <- as.character(sedimentID$Code[sedimentID$ID==rSedWaterCOIOTU_r$sample[rSedWaterCOIOTU_r$sample %in% sedimentID$ID]])
rSedWaterCOIOTU_r <-separate(rSedWaterCOIOTU_r,sample,into=c('site',"cond"))
rSedWaterCOIOTU_r$rep <- substr(rSedWaterCOIOTU_r$site,3,3)
rSedWaterCOIOTU_r$site <- substr(rSedWaterCOIOTU_r$site,1,2)
rSedWaterCOIOTU_r$site <- as.factor(rSedWaterCOIOTU_r$site)
rSedWaterCOIOTU_r$rep <- as.factor(rSedWaterCOIOTU_r$rep)
rSedWaterCOIOTU_r$cond <- as.factor(rSedWaterCOIOTU_r$cond)
rSedWaterCOIOTU_r <- rSedWaterCOIOTU_r[rSedWaterCOIOTU_r$site!="HH",]
#Statistics
#18S
##Test for normality under model
aov_residuals <- residuals(object =aov(OTUnum~cond*site,data=rSedWater18SOTU_r[rSedWater18SOTU_r$cond!="L",]))
shapiro.test(x = aov_residuals )
##Test
summary(aov(OTUnum~cond*site,data=rSedWater18SOTU_r[rSedWater18SOTU_r$cond!="L",]))
#COI
##Test for normality under model
aov_residuals <- residuals(object =aov(OTUnum~cond*site,data=rSedWaterCOIOTU_r[rSedWaterCOIOTU_r$cond!="L",]))
shapiro.test(x = aov_residuals )
##Test
summary(aov(OTUnum~cond*site,data=rSedWaterCOIOTU_r[rSedWaterCOIOTU_r$cond!="L",]))
#Now lets visualise the difference in 2d using nMDS
#18S
t18sdat <- t(rPreserv18S[-grep('L$',colnames(rPreserv18S))])
MDS18s <- metaMDS(t18sdat,distance = "bray")
nMDSdata18s <-as.data.frame(MDS18s$points)
nMDS18Sstress <- MDS18s$stress
#Here we rename the sediment samples to make life easier
row.names(nMDSdata18s)[7:15] <- paste("Z.",as.character(sedimentID$Code),sep="")
#Now we put in factors to help with plotting
row.names(nMDSdata18s) <- substr(row.names(nMDSdata18s),3,7)
nMDSdata18s$site <- substr(row.names(nMDSdata18s),1,2)
nMDSdata18s$type <- substr(row.names(nMDSdata18s),5,5)
nMDSdata18s$site.type <- paste(nMDSdata18s$site,nMDSdata18s$type,sep='.')
##The 18S data is ready for visualisation
#Now the COI
tCOIdat <- t(rPreservCOI[-grep('L$',colnames(rPreservCOI))])
MDSCOI <- metaMDS(tCOIdat)
nMDSdataCOI <-as.data.frame(MDSCOI$points)
nMDSCOIstress <- MDSCOI$stress
#Here we rename the sediment samples to make life easier
row.names(nMDSdataCOI)[7:15] <- paste("Z.",as.character(sedimentID$Code),sep="")
#Now we put in factors to help with plotting
row.names(nMDSdataCOI) <- substr(row.names(nMDSdataCOI),3,7)
nMDSdataCOI$site <- substr(row.names(nMDSdataCOI),1,2)
nMDSdataCOI$type <- substr(row.names(nMDSdataCOI),5,5)
nMDSdataCOI$site.type <- paste(nMDSdataCOI$site,nMDSdataCOI$type,sep='.')
##Now lets plot
#Set up a custom palette for colourblind safe plotting
pdf(file="../figures/nMDS18S.pdf",width=6,height=6)
par(mfrow=c(1,1))
palette(c("#CC79A7","#56B4E9","#0072B2","#F0E442","#E69F00", "#00b886","#007857"))
plot(nMDSdata18s$MDS1,nMDSdata18s$MDS2,col=as.factor(nMDSdata18s$site.type),xlab="MDS1",ylab="MDS2",pch=16,cex=2,main="18S all")
text(-1.8,2.6,paste("Stress = ",round(nMDS18Sstress,digits = 3),sep=''))
dev.off()
pdf(file="../figures/nMDSCOI.pdf",width=6,height=6)
par(mfrow=c(1,1))
plot(nMDSdataCOI$MDS1,nMDSdataCOI$MDS2,col=as.factor(nMDSdataCOI$site.type),pch=16,xlab="MDS1",ylab="MDS2",cex=2,main="COI all")
text(-2.1,2.7,paste("Stress = ",round(nMDSCOIstress,digits = 3),sep=''))
dev.off()
barplot(rep(100,11),col=1:11,names.arg = levels(as.factor(nMDSdata18s$site.type)),axes=F)
##Now we have overall data lets look into PERMANOVA stuff
##Lets make the permanova dataset
##18S
PERM18Ssed <- rPreserv18S[,substr(names(rPreserv18S),3,3)=="S"]
PERM18Swater <- rPreserv18S[,substr(names(rPreserv18S),7,7)=="N"]
PERM18Swater <- PERM18Swater[,4:12]
alldat <- rbind(t(PERM18Ssed),t(PERM18Swater))
treatment <- c(rep("S",9),rep("W",9))
sites <- rep(c(rep("1",3),rep("2",3),rep("3",3)),2)
##test for multivariate homogenity of dispersions
anova(betadisper(vegdist(alldat, method="bray"),paste(sites,treatment,sep="_")))
#PERMANOVA
adonis(alldat~treatment+sites,method="bray",perm=999)
##COI
PERMCOIsed <- rPreservCOI[,substr(names(rPreservCOI),3,3)=="S"]
PERMCOIwater <- rPreservCOI[,substr(names(rPreservCOI),7,7)=="N"]
PERMCOIwater <- PERMCOIwater[,4:12]
alldat <- rbind(t(PERMCOIsed),t(PERMCOIwater))
treatment <- c(rep("S",9),rep("W",9))
sites <- rep(c(rep("1",3),rep("2",3),rep("3",3)),2)
##test for multivariate homogenity of dispersions
anova(betadisper(vegdist(alldat, method="bray"),paste(sites,treatment,sep="_")))
#PERMANOVA
adonis(alldat~treatment+sites,method="bray",perm=999)
#now we have some broad details letting us know there are some differenes between sediment and water, lets see which groups are driving this difference
#First we need to annotate the taxonomy and create a dataset with only annotated OTUs
##COI
#first subset the data by observations that have assigned taxonomy
annotatedCOI <- rPreservCOI[rownames(rPreservCOI) %in% strictCOItaxonomy$V1,]
#now put in a column with the assignments
strictCOItaxonomy$assignment <- paste(strictCOItaxonomy$V3,strictCOItaxonomy$V4)
annotatedCOI$assignment <- strictCOItaxonomy$assignment[match(row.names(annotatedCOI),strictCOItaxonomy$V1)]
#now lets clean up the column so it only contains taxonomy tree
annotatedCOI$assignment <- gsub(".*root;(.*)","\\1",annotatedCOI$assignment)
#now lets collapse the data into site-sediment comparisons, excluding HH
treedatCOI <- data.frame("PQ.W"=rowSums(annotatedCOI[7:12]),"PQ.S"=rowSums(annotatedCOI[13:15]),"TB.W"=rowSums(annotatedCOI[22:27]),"TB.S"=rowSums(annotatedCOI[16:18]),"TQ.W"=rowSums(annotatedCOI[28:33]),"TQ.S"=rowSums(annotatedCOI[19:21]),"assignment"=annotatedCOI$assignment)
#Great now lets class each OTU into sediment, water, both or neither catagories per site
treedatCOI$PQ.stat <- ifelse(treedatCOI$PQ.W>0 & treedatCOI$PQ.S>0,"B",ifelse(treedatCOI$PQ.W>0 & treedatCOI$PQ.S==0,"w",ifelse(treedatCOI$PQ.W==0 & treedatCOI$PQ.S>0,"s",ifelse(treedatCOI$PQ.W==0 & treedatCOI$PQ.S==0,"n","error"))))
treedatCOI$TB.stat <- ifelse(treedatCOI$TB.W>0 & treedatCOI$TB.S>0,"B",ifelse(treedatCOI$TB.W>0 & treedatCOI$TB.S==0,"w",ifelse(treedatCOI$TB.W==0 & treedatCOI$TB.S>0,"s",ifelse(treedatCOI$TB.W==0 & treedatCOI$TB.S==0,"n","error"))))
treedatCOI$TQ.stat <- ifelse(treedatCOI$TQ.W>0 & treedatCOI$TQ.S>0,"B",ifelse(treedatCOI$TQ.W>0 & treedatCOI$TQ.S==0,"w",ifelse(treedatCOI$TQ.W==0 & treedatCOI$TQ.S>0,"s",ifelse(treedatCOI$TQ.W==0 & treedatCOI$TQ.S==0,"n","error"))))
treedatCOI$all.stat <- "nonexclusive"
for (number in 1:length(treedatCOI$PQ.W)){
items <-  unique(c(treedatCOI$PQ.stat[number],treedatCOI$TB.stat[number],treedatCOI$TQ.stat[number]))
items <- items[items!='n' ]
if (length(unique(items))>1){treedatCOI$all.stat[number] <- "nonexclusive"} else {
if(length(unique(items))<1){treedatCOI$all.stat[number] <- "none"}else{if (unique(items=="w")){treedatCOI$all.stat[number] <- "water"}else{if (unique(items=="s")){treedatCOI$all.stat[number] <- "sediment"}}}}
}
#18S
#first subset the data by observations that have assigned taxonomy
annotated18S <- rPreserv18S[rownames(rPreserv18S) %in% strict18Staxonomy$V1,]
#now put in a column with the assignments
annotated18S$assignment <- strict18Staxonomy$V2[match(row.names(annotated18S),strict18Staxonomy$V1)]
#now lets clean up the column so it only contains taxonomy tree
annotated18S$assignment <- gsub(".*(Eukaryota.*)","\\1",annotated18S$assignment)
#now lets collapse the data into site-sediment comparisons, excluding HH
treedat18S <- data.frame("PQ.W"=rowSums(annotated18S[7:12]),"PQ.S"=rowSums(annotated18S[13:15]),"TB.W"=rowSums(annotated18S[22:27]),"TB.S"=rowSums(annotated18S[16:18]),"TQ.W"=rowSums(annotated18S[28:33]),"TQ.S"=rowSums(annotated18S[19:21]),"assignment"=annotated18S$assignment)
#Great now lets class each OTU into sediment, water, both or neither catagories per site
treedat18S$PQ.stat <- ifelse(treedat18S$PQ.W>0 & treedat18S$PQ.S>0,"B",ifelse(treedat18S$PQ.W>0 & treedat18S$PQ.S==0,"w",ifelse(treedat18S$PQ.W==0 & treedat18S$PQ.S>0,"s",ifelse(treedat18S$PQ.W==0 & treedat18S$PQ.S==0,"n","error"))))
treedat18S$TB.stat <- ifelse(treedat18S$TB.W>0 & treedat18S$TB.S>0,"B",ifelse(treedat18S$TB.W>0 & treedat18S$TB.S==0,"w",ifelse(treedat18S$TB.W==0 & treedat18S$TB.S>0,"s",ifelse(treedat18S$TB.W==0 & treedat18S$TB.S==0,"n","error"))))
treedat18S$TQ.stat <- ifelse(treedat18S$TQ.W>0 & treedat18S$TQ.S>0,"B",ifelse(treedat18S$TQ.W>0 & treedat18S$TQ.S==0,"w",ifelse(treedat18S$TQ.W==0 & treedat18S$TQ.S>0,"s",ifelse(treedat18S$TQ.W==0 & treedat18S$TQ.S==0,"n","error"))))
treedat18S$all.stat <- "nonexclusive"
for (number in 1:length(treedat18S$PQ.W)){
items <-  unique(c(treedat18S$PQ.stat[number],treedat18S$TB.stat[number],treedat18S$TQ.stat[number]))
items <- items[items!='n' ]
if (length(unique(items))>1){treedat18S$all.stat[number] <- "nonexclusive"} else {
if(length(unique(items))<1){treedat18S$all.stat[number] <- "none"}else{if (unique(items=="w")){treedat18S$all.stat[number] <- "water"}else{if (unique(items=="s")){treedat18S$all.stat[number] <- "sediment"}}}}
}
table(treedat18S$all.stat)
###Notes - when you redo this analysis on raw data (no taxonomic subsetting) you get greater diversity in sediment for both 18S and COI.
##Output data for WIRMS
WIRMSoutput <- data.frame("ID"=c(rownames(annotated18S),rownames(annotatedCOI)),"dataset"=c(rep("18S",length(rownames(annotated18S))),rep("COI",length(rownames(annotatedCOI)))),"annotation"=c(annotated18S$assignment,annotatedCOI$assignment))
#This expression uses regex to take everything after the last semicolon. It is broken by non alpha numeric characters
WIRMSoutput$species  <- gsub(".*;([A-z0-9 -]*)$","\\1",WIRMSoutput$annotation)
#Some of the entries ae amnbiguous eg. Flabellual sp. so the extra characters breaks the regex. We can seperate these out now and
#make a clean dataset
WIRMSoutput <- WIRMSoutput[nchar(WIRMSoutput$species)<50,]
write.csv(WIRMSoutput,file="../taxonomy/WORMSdata.csv")
### I then used the WORMS online portal to identify the accepted taxonomy for each of the species.
#now lets read in the new taxonomy
WORMSdat <- read_excel("../taxonomy/Matches/WORMS.xls")
#get rid of entries with no match
WORMSdat <- WORMSdat[!is.na(WORMSdat$AphiaID),]
WORMSdat18S <- WORMSdat[WORMSdat$dataset=="18S",]
WORMSdatCOI <- WORMSdat[WORMSdat$dataset=="COI",]
##Now lets create data of entries with entire phylogeny
Cleantreedat18s <- treedat18S[rownames(treedat18S) %in% WORMSdat$ID[WORMSdat$dataset=="18S"],]
CleantreedatCOI <- treedatCOI[rownames(treedatCOI) %in% WORMSdat$ID[WORMSdat$dataset=="COI"],]
#18S
taxamediumstats <- Cleantreedat18s[,8:11]
WORMSdat18S<-WORMSdat[WORMSdat$dataset=="18S",]
taxamediumstats$Phylum <- WORMSdat18S$Phylum[match(rownames(taxamediumstats),WORMSdat18S$ID)]
taxamediumstats$Class <- WORMSdat18S$Class[match(rownames(taxamediumstats),WORMSdat18S$ID)]
taxamediumstats$Order <- WORMSdat18S$Order[match(rownames(taxamediumstats),WORMSdat18S$ID)]
taxamediumstats$Family <- WORMSdat18S$Family[match(rownames(taxamediumstats),WORMSdat18S$ID)]
taxamediumstats$Genus <- WORMSdat18S$Genus[match(rownames(taxamediumstats),WORMSdat18S$ID)]
taxamediumstats$Species <- WORMSdat18S$Species[match(rownames(taxamediumstats),WORMSdat18S$ID)]
table(taxamediumstats[,4:5])
taxamediumstats18s<-taxamediumstats
#COI
taxamediumstats <- CleantreedatCOI[,8:11]
WORMSdatCOI<-WORMSdat[WORMSdat$dataset=="COI",]
taxamediumstats$Phylum <- WORMSdatCOI$Phylum[match(rownames(taxamediumstats),WORMSdatCOI$ID)]
taxamediumstats$Class <- WORMSdatCOI$Class[match(rownames(taxamediumstats),WORMSdatCOI$ID)]
taxamediumstats$Order <- WORMSdatCOI$Order[match(rownames(taxamediumstats),WORMSdatCOI$ID)]
taxamediumstats$Family <- WORMSdatCOI$Family[match(rownames(taxamediumstats),WORMSdatCOI$ID)]
taxamediumstats$Genus <- WORMSdatCOI$Genus[match(rownames(taxamediumstats),WORMSdatCOI$ID)]
taxamediumstats$Species <- WORMSdatCOI$Species[match(rownames(taxamediumstats),WORMSdatCOI$ID)]
table(data.frame(cbind(taxamediumstats$all.stat,taxamediumstats$Phylum)))
taxamediumstats <- rbind(taxamediumstats,taxamediumstats18s)
#Now we use some hacky script to get back proportions of each variable, grouping nay taxa with less than 8 entries
SedWatertaxa <- table(data.frame(cbind(taxamediumstats$all.stat,taxamediumstats$Phylum)))[-1,]
SedWatertaxa <-cbind(SedWatertaxa[,c(1:length(unname(colSums(SedWatertaxa) >5)))[unname(colSums(SedWatertaxa) >8)]],rowSums(SedWatertaxa[,-c(1:length(unname(colSums(SedWatertaxa) >5)))[unname(colSums(SedWatertaxa) >8)]]))
colnames(SedWatertaxa)[11] <- "Other"
SedWatertaxaP <- prop.table(SedWatertaxa,margin=2)
SedWatertaxaP <- rbind(SedWatertaxaP[3,], SedWatertaxaP[1:2,])
row.names(SedWatertaxaP) <- c("Water","Both","Sediment")
##Is detction within each taxa staitically different?
SedWatertaxaStat <-ceiling(rbind((SedWatertaxa[2,]+SedWatertaxa[1,]/2),(SedWatertaxa[3,]+SedWatertaxa[1,]/2)))
landing <- c(rep(NA,length(SedWatertaxaStat[1,])))
for (taxa in 1:length(SedWatertaxaStat[1,])){
landing[taxa] <- unname((binom.test(SedWatertaxaStat[,taxa],alternative ="two.sided",p=0.5)["p.value"]))
}
p.adjust(unlist(landing),method="bonferroni")
binom.test(SedWatertaxaStat[,10],alternative ="two.sided",p=0.5)
p.adjust()
par(mar=c(8.1,6.5,2.1,2.1))
barplot(SedWatertaxaP[,length(SedWatertaxaP[1,]):1],col=c("#01665e","#f6e8c3","#8c510a"),las=2)
mtext("Proportion of Taxa Detected in Medium",2,line=3)
barplot(SedWatertaxaP,col=c("#01665e","#f6e8c3","#8c510a"),las=2)
##Plot
pdf("../figures/SedWatertaxa.pdf",width=10,height=5)
par(mar=c(8.1,6.5,2.1,2.1))
barplot(SedWatertaxaP,col=c("#01665e","#f6e8c3","#8c510a"),las=2)
mtext("Proportion of Taxa Detected in Medium",2,line=3)
dev.off()
