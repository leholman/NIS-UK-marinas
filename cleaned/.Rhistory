sapply(data,2,FUN = function(dat) binom.test(c(floor(((dat[1]/sum(dat))+((dat[2]/sum(dat))/2))*sum(dat)),floor(sum(dat)-dat[3])))$p.value)
#lets set up some raw data
data <- data.frame("Spp.1"=c(3,10,3),"Spp.2"=c(10,1,0),"Spp.3"=c(0,0,17))
apply(data,2,FUN = function(dat) binom.test(c(floor(((dat[1]/sum(dat))+((dat[2]/sum(dat))/2))*sum(dat)),floor(((dat[3]/sum(dat))+((dat[2]/sum(dat))/2))*sum(dat))))$p.value)
p.adjust(apply(data,2,FUN = function(dat) binom.test(c(floor(((dat[1]/sum(dat))+((dat[2]/sum(dat))/2))*sum(dat)),floor(((dat[3]/sum(dat))+((dat[2]/sum(dat))/2))*sum(dat))))$p.value)
)
#lets set up some raw data
data <- data.frame("Spp.1"=c(3,10,3),"Spp.2"=c(10,1,0),"Spp.3"=c(0,0,17))
row.names(data) <- c("Sediment","Both","Water")
View(data)
df1 <- structure(list(TERMAC_Value = c(122L, 122L, 122L, 122L, 122L,
605L), TERMAC_ShortName = structure(c(20L, 20L, 20L, 20L, 20L,
17L), .Label = c("AG", "BWS", "DAWS2", "DEMF", "DM", "EAAW",
"EABT", "EASDS", "EASM", "EEAW2", "KSP", "Marsh", "MAWS", "MEMF",
"MeWG", "MWS", "PV", "TWS", "WM", "ZM"), class = "factor"), GLOBCOV_Value = c(30L,
130L, 60L, 140L, 140L, 60L), Glob_ShortName = structure(c(14L,
11L, 8L, 6L, 6L, 8L), .Label = c("Bare", "CldBdFrst", "CropVeg",
"FloodFrt", "FloodGrs", "Grass", "GrassSgrub", "OpBdFrst", "OpNdFrst",
"RainCrop", "Shrub", "ShrubGrass", "Sparse", "VegCrop", "Water"
), class = "factor")), row.names = c(NA, 6L), class = "data.frame")
df2 <- structure(list(x = structure(c(1L, 2L, 6L, 7L, 3L, 4L, 5L), .Label = c("b1[1] VegCrop",
"b1[2] Shrub", "b1b2[1,1] VegCrop ZM", "b1b2[1,2] VegCrop PV",
"b1b2[2,2] Shrub PV", "b2[1] ZM", "b2[2] PV"), class = "factor"),
Mean = c(4.0188615, 1.0145846, -0.3134498, 1.1346487, -0.2701251,
-0.5978043, -0.06)), class = "data.frame", row.names = c(NA,
-7L))
df1 <- structure(list(TERMAC_Value = c(122L, 122L, 122L, 122L, 122L,
605L), TERMAC_ShortName = structure(c(20L, 20L, 20L, 20L, 20L,
17L), .Label = c("AG", "BWS", "DAWS2", "DEMF", "DM", "EAAW",
"EABT", "EASDS", "EASM", "EEAW2", "KSP", "Marsh", "MAWS", "MEMF",
"MeWG", "MWS", "PV", "TWS", "WM", "ZM"), class = "factor"), GLOBCOV_Value = c(30L,
130L, 60L, 140L, 140L, 60L), Glob_ShortName = structure(c(14L,
11L, 8L, 6L, 6L, 8L), .Label = c("Bare", "CldBdFrst", "CropVeg",
"FloodFrt", "FloodGrs", "Grass", "GrassSgrub", "OpBdFrst", "OpNdFrst",
"RainCrop", "Shrub", "ShrubGrass", "Sparse", "VegCrop", "Water"
), class = "factor")), row.names = c(NA, 6L), class = "data.frame")
df2 <- structure(list(x = structure(c(1L, 2L, 6L, 7L, 3L, 4L, 5L), .Label = c("b1[1] VegCrop",
"b1[2] Shrub", "b1b2[1,1] VegCrop ZM", "b1b2[1,2] VegCrop PV",
"b1b2[2,2] Shrub PV", "b2[1] ZM", "b2[2] PV"), class = "factor"),
Mean = c(4.0188615, 1.0145846, -0.3134498, 1.1346487, -0.2701251,
-0.5978043, -0.06)), class = "data.frame", row.names = c(NA,
-7L))
View(df1)
View(df2)
dfnew <- df1
?split
#Load in packages
library("dplyr")
library("vegan")
library("reshape")
library("reshape2")
library("ggplot2")
library("stringr")
library("tidyr")
library("RColorBrewer")
library("metacoder")
library("readxl")
#Set some variables
minreads <- 3
items <- NULL
#Set the seed
set.seed("123456")
#Set wd and load up sediment data
setwd("~/Desktop/AnalysisUKMarinaData/raw.data/")
sedimentID <- read.csv(file="../sedimentdata.csv")
#### Data Cleaning ####
files <- system2('ls',stdout=TRUE)
## All samples cleaned ####
#### LULU Effects ####
###Now we want to see what effect LULU has on our data, we know it decreases the number of OTUs but lets produce a table contain pre and post LULU OTU number per OTU clusting method
setwd(dir = "../cleaned/")
files <- system2('ls',stdout=TRUE)
OTUcount <- data.frame("File"=rep("NA",length(files)),"OTUcount"=rep("NA",length(files)))
OTUcount$File <- as.character(OTUcount$File)
OTUcount$OTUcount <- as.numeric(OTUcount$OTUcount)
count <- 1
for (file in files){
samples <- read.csv(file = file,sep=",",header=TRUE)
runninglength <- length(samples[,1])
OTUcount[count,]<- c(file,runninglength)
count <- count+1
}
OTUcount <- cbind(OTUcount[grep("lulu",OTUcount$File),],OTUcount[grep("lulu",OTUcount$File,invert=TRUE),2])
colnames(OTUcount)[3] <- "OTUraw"
colnames(OTUcount)[2] <- "OTUlulu"
#Lets plot a little stacked barplot
pdf(file="../figures/LULUeffect.pdf",width=8.95,height=6.3)
OTUcountT <- as.matrix(t(OTUcount[-1]))
par(mfrow=c(1,1))
par(mar=c(6.1,4.1,4.1,2.1))
barplot(as.numeric(OTUcountT[2,]),col="red",ylim=c(0,12000),ylab="Number of OTUs",names.arg = c("COI.0.97","COI.swarm","COI.unoise","18S.0.97","18S.swarm","18S.unoise"),las=2)
par(new=T)
barplot(as.numeric(OTUcountT[1,]), col='skyblue',ylim=c(0,12000),axes = F)
legend("topright",c("Pre-LULU","Post-LULU"),fill=c("red","skyblue"), bty = "n")
dev.off()
#There is a clear positive effect on LULU on the dataset. Analyses will proceed using LULU
#### OTU CLustering Effect ####
#Count number of OTUs in dataset
## Alpha diversity estimates as a result of bioinformatics
###Here we are asking the question do we see more or less OTUs generated by different methods
#We may also ask if by truncating at different numbers of minimum reads converges on a estimate???
#This section assumes all input files have the same number of observations in the same order, it will not work otherwise
#First we get the observation names and create a dataframe to store our results in
spark <- read.csv(file=file[1],sep=",",header=TRUE)
spark <- spark[-1]
files <- files[grep("lulu",files)]
OTUcountbymethod <- as.data.frame(matrix(data=NA,nrow=length(files),ncol=length(colnames(spark))))
colnames(OTUcountbymethod) <- substr(colnames(spark),3,10)
#Cheat to rename cols
colnames(OTUcountbymethod)[13:21] <- as.character(seddat$Code)
count <- 1
for (file in  files){
loopdata <- read.csv(file=file,sep=",",header=TRUE)
loopdata <-loopdata[-1]
counter <- function(x){
temp <- x
temp[temp>0] <- 1
return(sum(temp))
rm(temp)
}
loopresults <- apply(loopdata,2,counter)
OTUcountbymethod[count,] <- unname(loopresults)
count <- count +1
}
#This bit is specific to the data structure, we need to wrangle the data into a long form for plots and stats with OTU no as a responce variable
OTUcountbymethod$Marker <- substr(files,9,9)
OTUcountbymethod$OTUclust <- files %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)} %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)} %>%
{gsub("[:.:][a-z]*$","",.)}
OTUcountbymethod <- OTUcountbymethod %>%
gather("code","OTUnum",1:33)
OTUcountmethod <- OTUcountbymethod
OTUcountbymethod <- dcast(OTUcountbymethod,code+Marker~OTUclust,value.var="OTUnum")
OTUcountbymethod <-  melt(OTUcountbymethod)
OTUcountbymethod <-rename(OTUcountbymethod,c("variable"="OTUclust","value"="OTUnum"))
OTUcountbymethod <- OTUcountbymethod %>%
separate(code, c("site", "cond")) %>%
separate(site, c("site","rep"),sep=2)
cols <- 1:5
OTUcountbymethod[cols] <- lapply(OTUcountbymethod[cols], factor)
OTUcountbymethod$cond2 <- as.character(OTUcountbymethod$cond)
OTUcountbymethod$cond2[OTUcountbymethod$cond2=="L"] <- "W"
OTUcountbymethod$cond2[OTUcountbymethod$cond2=="N"] <- "W"
OTUcountbymethod$cond2 <- as.factor(OTUcountbymethod$cond2)
#Now the data is in a long format suitable for figures and statistics.
#First lets seperate out the markers and look at the effects of OTU clustering
resultsZ <- OTUcountbymethod[OTUcountbymethod$Marker=="Z",]
resultsL <- OTUcountbymethod[OTUcountbymethod$Marker=="L",]
pdf(file="../figures/OTUclusteringeffect.pdf",width=11,height=8)
palette(brewer.pal(8,"Set1"))
par(mfrow=c(1,2))
par(mar=c(7.1,4.1,4.1,2.1))
boxplot(resultsL$OTUnum~resultsL$OTUclust+resultsL$site+resultsL$cond2, col=brewer.pal(3,"Set1"),drop = TRUE,las=2,ylab="Number of OTUs",main="COI",ylim=c(450,2800))
rect(-10,0,9.48,4000, col=rgb(0.1,0.1,0.1,alpha=0.35),xpd=F,lwd=0)
boxplot(resultsL$OTUnum~resultsL$OTUclust+resultsL$site+resultsL$cond2, col=brewer.pal(3,"Set1"),drop = TRUE,axes=F,add=T,ylim=c(450,2800))
legend("topright",c("0.97","swarm","unoise3"),fill=brewer.pal(3,"Set1"), bty = "n")
text(3,480,col="white",labels="Sediment",cex=0.75)
text(20,480,col="Black",labels="Water",cex=0.75)
boxplot(resultsZ$OTUnum~resultsZ$OTUclust+resultsZ$site+resultsZ$cond2, col=brewer.pal(3,"Set1"),drop = TRUE,las=2,ylab="Number of OTUs",main="18S",ylim=c(-100,2300))
rect(-1000,-1000,9.48,4000, col=rgb(0.1,0.1,0.1,alpha=0.35),xpd=F,lwd=0)
boxplot(resultsZ$OTUnum~resultsZ$OTUclust+resultsZ$site+resultsZ$cond2, col=brewer.pal(3,"Set1"),drop = TRUE,axes=F,add=T,ylim=c(-100,2300))
legend("topright",c("0.97","swarm","unoise3"),fill=brewer.pal(3,"Set1"), bty = "n")
text(3,-50,col="white",labels="Sediment",cex=0.75)
text(20,-50,col="Black",labels="Water",cex=0.75)
dev.off()
#Now we want to look at beta diversity, we are not normlising here either as comparisons are not being made between sites
files <- system2('ls',stdout=TRUE)
files <- files[grep("lulu",files)]
BdivOTUresults <- as.data.frame(matrix(ncol = length(files),nrow=528))
colnames(BdivOTUresults) <- files
count <- 1
for (file in  files){
loopdata <- read.csv(file=file,sep=",",header=TRUE)
loopdata <- loopdata[-1]
OTU.count.distance<-as.matrix(vegdist(t(loopdata), method="bray", upper=FALSE, binary=F))
OTU.count.distance[lower.tri(OTU.count.distance)] <- NA
pairwise <- melt(OTU.count.distance)
pairwise <- pairwise[!is.na(pairwise$value),]
pairwise <- pairwise[pairwise$value>0,]
BdivOTUresults[,count] <- pairwise$value
count <- count+1
}
#Plotting bray-curtis values for each OTU generating method against each other tests community similarity across methods
pdf(file="../figures/OTUclusting_BC_COI.pdf")
plot(BdivOTUresults[,1:3])
dev.off()
pdf(file="../figures/OTUclusting_BC_18S.pdf")
plot(BdivOTUresults[,4:6])
dev.off()
##Overall it seems that b diversity information is similar regardless of OTU generation used. We dont want to use 0.97 becuase we know it doesnt represent the biological reality, we dont want to use swarm becuase it generates many more OTUs than possible as it isnt able to deal with errors in Illumina data. unoise3 is best as it attempts to recreate biological seqs.
#Now we can start dealing with variables of interest to our study.
#### Longmire's or Freezing ####
#First we need to rarefy our data to make sensible comparisons between sites/conditions
#Read in data
Preserv18S <- read.table(file="Cleaned.Zhanlulu.unoise3.csv",row.names = 1,sep=",",header=TRUE)
#Rarefy
rPreserv18S<-
Preserv18S%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rarecurve(.,step=100)
rPreserv18S<-
Preserv18S%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rrarefy(.,min(rowSums(.)))%>%
t(.)
rPreserv18S <- as.data.frame(rPreserv18S,row.names = row.names(Preserv18S))
rPreserv18SOTU <- data.frame("sample"=names(rPreserv18S),"OTUnum"=unname(apply(rPreserv18S,2,counter)))
#get rid of leading makrer name
rPreserv18SOTU$sample <- rPreserv18SOTU$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreserv18SOTU <- rPreserv18SOTU[-grep("S.[0-9][0-9]",rPreserv18SOTU$sample),]
#Turn names into conds
rPreserv18SOTU <-separate(rPreserv18SOTU,sample,into=c('site','cond'),sep=4)
rPreserv18SOTU$rep <- substr(rPreserv18SOTU$site,3,3)
rPreserv18SOTU$site <- substr(rPreserv18SOTU$site,1,2)
rPreserv18SOTU$site <- as.factor(rPreserv18SOTU$site)
rPreserv18SOTU$rep <- as.factor(rPreserv18SOTU$rep)
rPreserv18SOTU$cond <- as.factor(rPreserv18SOTU$cond)
#Now the same for COI
PreservCOI <- read.table(file="~/Desktop/AnalysisUKMarinaData/cleaned/Cleaned.Leraylulu.unoise3.csv",row.names = 1,sep=",",header=TRUE)
minimumCOI <- min(colSums(PreservCOI))
#Rarefy
rPreservCOI<-
PreservCOI%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rarecurve(.,step=100)
rPreservCOI<-
PreservCOI%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rrarefy(.,min(rowSums(.)))%>%
t(.)
rPreservCOI <- as.data.frame(rPreservCOI,row.names = row.names(PreservCOI))
rPreservCOIOTU <- data.frame("sample"=names(rPreservCOI),"OTUnum"=unname(apply(rPreservCOI,2,counter)))
#get rid of leading makrer name
rPreservCOIOTU$sample <- rPreservCOIOTU$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreservCOIOTU <- rPreservCOIOTU[-grep("S.[0-9][0-9]",rPreservCOIOTU$sample),]
#Turn names into conds
rPreservCOIOTU <-separate(rPreservCOIOTU,sample,into=c('site',"cond"))
rPreservCOIOTU$rep <- substr(rPreservCOIOTU$site,3,3)
rPreservCOIOTU$site <- strsplit(rPreservCOIOTU$site,"[0-9]")
rPreservCOIOTU$site <- unlist(rPreservCOIOTU$site)
rPreservCOIOTU$site <- as.factor(rPreservCOIOTU$site)
rPreservCOIOTU$rep <- as.factor(rPreservCOIOTU$rep)
rPreservCOIOTU$cond <- as.factor(rPreservCOIOTU$cond)
pdf(file="../figures/Preserv_all.pdf",width=8,height=4)
par(mfrow=c(1,2))
boxplot(rPreserv18SOTU$OTUnum~rPreserv18SOTU$cond+rPreserv18SOTU$site,xlab="Condition-Site",ylab="OTUs",main="18S", col = rep(c("#E69F00","#0072B2"),4),las=2)
boxplot(rPreservCOIOTU$OTUnum~rPreservCOIOTU$cond+rPreservCOIOTU$site,xlab="Condition-Site",ylab="OTUs",main="COI", col = rep(c("#E69F00","#0072B2"),4),las=2)
dev.off()
#Brilliant now lets see how this pattern interacts with taxonomy
#Read in the taxonomy
strict18Staxonomy <- read.table(file="../taxonomy/18S_SILVA_results.txt",sep="\t")
relaxed18Staxonomy <- read.table(file = "../taxonomy/18SMEGAN_met.txt",sep=",")
strictCOItaxonomy <- read.table(file="../taxonomy/COI_MIDORI_results.txt")
relaxedCOItaxonomy <- read.table(file="../taxonomy/COIMEGAN_met.txt",sep=",")
#Now lets subset the data by the taxonomy
rPreserv18Smet <-rPreserv18S[row.names(rPreserv18S) %in% unique(c(as.character(strict18Staxonomy$V1),as.character(relaxed18Staxonomy$V1))),]
rPreservCOImet <-rPreservCOI[row.names(rPreservCOI) %in% unique(c(as.character(strictCOItaxonomy$V1),as.character(relaxedCOItaxonomy$V1))),]
rPreserv18SOTUmet <- data.frame("sample"=names(rPreserv18Smet),"OTUnum"=unname(apply(rPreserv18Smet,2,counter)))
#get rid of leading makrer name
rPreserv18SOTUmet$sample <- rPreserv18SOTUmet$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreserv18SOTUmet <- rPreserv18SOTUmet[-grep("S.[0-9][0-9]",rPreserv18SOTUmet$sample),]
#Turn names into conds
rPreserv18SOTUmet <-separate(rPreserv18SOTUmet,sample,into=c('site',"cond"))
rPreserv18SOTUmet$rep <- substr(rPreserv18SOTUmet$site,3,3)
rPreserv18SOTUmet$site <- strsplit(rPreserv18SOTUmet$site,"[0-9]")
rPreserv18SOTUmet$site <- unlist(rPreserv18SOTUmet$site)
rPreserv18SOTUmet$site <- as.factor(rPreserv18SOTUmet$site)
rPreserv18SOTUmet$rep <- as.factor(rPreserv18SOTUmet$rep)
rPreserv18SOTUmet$cond <- as.factor(rPreserv18SOTUmet$cond)
rPreservCOIOTUmet <- data.frame("sample"=names(rPreservCOImet),"OTUnum"=unname(apply(rPreservCOImet,2,counter)))
#get rid of leading makrer name
rPreservCOIOTUmet$sample <- rPreservCOIOTUmet$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
rPreservCOIOTUmet <- rPreservCOIOTUmet[-grep("S.[0-9][0-9]",rPreservCOIOTUmet$sample),]
#Turn names into conds
rPreservCOIOTUmet <-separate(rPreservCOIOTUmet,sample,into=c('site',"cond"))
rPreservCOIOTUmet$rep <- substr(rPreservCOIOTUmet$site,3,3)
rPreservCOIOTUmet$site <- strsplit(rPreservCOIOTUmet$site,"[0-9]")
rPreservCOIOTUmet$site <- unlist(rPreservCOIOTUmet$site)
rPreservCOIOTUmet$site <- as.factor(rPreservCOIOTUmet$site)
rPreservCOIOTUmet$rep <- as.factor(rPreservCOIOTUmet$rep)
rPreservCOIOTUmet$cond <- as.factor(rPreservCOIOTUmet$cond)
pdf(file="../figures/Preserv_met.pdf",width=8,height=4)
par(mfrow=c(1,2))
boxplot(rPreserv18SOTUmet$OTUnum~rPreserv18SOTUmet$cond+rPreserv18SOTUmet$site,xlab="Condition-Site",ylab="MetazoanOTUs",main="18S", col = rep(c("#E69F00","#0072B2"),4),las=2)
boxplot(rPreservCOIOTUmet$OTUnum~rPreservCOIOTUmet$cond+rPreservCOIOTUmet$site,xlab="Condition-Site",ylab="MetazoanOTUs",main="COI", col = rep(c("#E69F00","#0072B2"),4),las=2)
dev.off()
##Statistics
##ALL data
#Parametric
#Significant difference in 18S
t.test(rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="L"],rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="N"],paired=TRUE)
#No difference in COI
t.test(rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="L"],rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="N"],paired=TRUE)
#Non-Parametric
#Significant difference in 18S
wilcox.test(rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="L"],rPreserv18SOTU$OTUnum[rPreserv18SOTU$cond=="N"],paired=TRUE)
#No difference in COI
wilcox.test(rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="L"],rPreservCOIOTU$OTUnum[rPreservCOIOTU$cond=="N"],paired=TRUE)
##Just metazoan
#Sig diff in 18S
t.test(rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="L"],rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="N"],paired=TRUE)
#No difference in COI
t.test(rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="L"],rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="N"],paired=TRUE)
#Non-Parametric
#Significant difference in 18S
wilcox.test(rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="L"],rPreserv18SOTUmet$OTUnum[rPreserv18SOTUmet$cond=="N"],paired=TRUE)
#No difference in COI
wilcox.test(rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="L"],rPreservCOIOTUmet$OTUnum[rPreservCOIOTUmet$cond=="N"],paired=TRUE)
#Lets see at what number of reads the difference is no longer siginificant
datasets <-c("rPreserv18S","rPreserv18Smet","rPreservCOI","rPreservCOImet")
Pbootresults <- as.data.frame(matrix(data=NA,ncol=5,nrow = length(1:200)))
names(Pbootresults) <- c("MinReads",datasets)
Pbootresults$MinReads <- 1:200
Pbootresultsdir <- Pbootresults
colcount <-2
for (dataset in names(Pbootresults[2:5])){
inputdataO <-get(dataset)
bootcount <- 1
for (minR in 1:200){
inputdata <- inputdataO
inputdata[inputdata< minR] <- 0
inputdata <- inputdata[rowSums(inputdata) > 0,]
inputdataOTU <- data.frame("sample"=names(inputdata),"OTUnum"=unname(apply(inputdata,2,counter)))
#get rid of leading makrer name
inputdataOTU$sample <- inputdataOTU$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#take out sediment samples
inputdataOTU <- inputdataOTU[-grep("S.[0-9][0-9]",inputdataOTU$sample),]
#Turn names into conds
inputdataOTU <-separate(inputdataOTU,sample,into=c('site',"cond"))
inputdataOTU$rep <- substr(inputdataOTU$site,3,3)
inputdataOTU$site <- strsplit(inputdataOTU$site,"[0-9]")
inputdataOTU$site <- unlist(inputdataOTU$site)
inputdataOTU$site <- as.factor(inputdataOTU$site)
inputdataOTU$rep <- as.factor(inputdataOTU$rep)
inputdataOTU$cond <- as.factor(inputdataOTU$cond)
item <-wilcox.test(inputdataOTU$OTUnum[inputdataOTU$cond=="L"],inputdataOTU$OTUnum[inputdataOTU$cond=="N"],paired=TRUE)
Pbootresults[bootcount,colcount] <- item$p.value
if(item$p.value<0.05){
Pbootresultsdir[bootcount,colcount] <-ifelse(mean(inputdataOTU$OTUnum[inputdataOTU$cond=="L"])>mean(inputdataOTU$OTUnum[inputdataOTU$cond=="N"]),"6","2")
}
bootcount <- bootcount+1
}
colcount <- colcount+1
}
#Lets plot these to examine how read truncation affects differences
pdf(file="../figures/Preserv_Wilcox_trunc.pdf",width=7,height=7)
plot(Pbootresults$MinReads,Pbootresults$rPreserv18S,type="l",col="darkgreen",ylim=c(-0.1,1),xlab="Number of normalised reads at truncation",ylab="Wilcoxon P Value")
points(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreserv18S)],rep(-0.02,length(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreserv18S)])),pch=as.numeric(Pbootresultsdir$rPreserv18S[!is.na(Pbootresultsdir$rPreserv18S)]),col="darkgreen",cex=0.3)
points(Pbootresults$MinReads,Pbootresults$rPreservCOI,type="l",col="darkblue")
points(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreservCOI)],rep(-0.06,length(Pbootresultsdir$MinReads[!is.na(Pbootresultsdir$rPreservCOI)])),pch=as.numeric(Pbootresultsdir$rPreservCOI[!is.na(Pbootresultsdir$rPreservCOI)]),col="darkblue",cex=0.3)
abline(h=0.05,lty=3,col="red")
legend("topleft",legend=c("18S","COI"),col=c("darkgreen","darkblue"),lty = 1,bty="n")
dev.off()
##Lets make the permanova dataset
PERM18Slong <- rPreserv18S[,substr(names(rPreserv18S),7,7)=="L"]
PERM18Sfroz <- rPreserv18S[,substr(names(rPreserv18S),7,7)=="N"]
test <- rbind(t(PERM18Slong),t(PERM18Sfroz))
treatment <- c(rep("L",12),rep("N",12))
sites <- rep(c(rep("1",3),rep("2",3),rep("3",3),rep("4",3)),2)
PERMresults.18S.P <- adonis(test~treatment*sites,method="bray",perm=999)
PERMresults.18S.S <- adonis(test~sites,method="bray",perm=9999)
#We see highly significant differences between sites and no difference between treatments
##Lets make the permanova dataset
PERMCOIlong <- rPreservCOI[,substr(names(rPreservCOI),7,7)=="L"]
PERMCOIfroz <- rPreservCOI[,substr(names(rPreservCOI),7,7)=="N"]
test <- rbind(t(PERMCOIlong),t(PERMCOIfroz))
treatment <- c(rep("L",12),rep("N",12))
sites <- rep(c(rep("1",3),rep("2",3),rep("3",3),rep("4",3)),2)
PERMresults.COI.P <- adonis(test~treatment*sites,method="bray",perm=999)
PERMresults.COI.S <- adonis(test~sites,method="bray",perm=9999)
#Groups not significantly different
#### Sediment or Water ####
##Now we have moved on from comparing longmires and frozen lets re-rarefy the COI data without the longmires sampes
##The limiting sample in the 18S dataset is a longmires sample so no need to rarefy there!
minimumCOI <- min(colSums(PreservCOI[names(PreservCOI)[-grep("L$",names(PreservCOI))]]))
#Rarefy for no longmires
rPreservCOI<-
PreservCOI%>%
filter(rowSums(.)>0)%>%
t(.)%>%
rrarefy(.,minimumCOI)%>%
t(.)
rPreservCOI <- as.data.frame(rPreservCOI,row.names = row.names(PreservCOI))
#18S
#First lets compare sediment and water OTU number!
palette(c("#CC79A7","#56B4E9","#0072B2","#F0E442","#E69F00", "#00b886","#007857"))
rSedWater18S <- data.frame("HH.W"=rowSums(rPreserv18S[grep("Z.HH[123].N",colnames(rPreserv18S))]),"PQ.W"=rowSums(rPreserv18S[grep("Z.PQ[123].N",colnames(rPreserv18S))]),"PQ.S"=rowSums(rPreserv18S[grep("Z.S.0[123]",colnames(rPreserv18S))]),"TB.W"=rowSums(rPreserv18S[grep("Z.TB[123].N",colnames(rPreserv18S))]),"TB.S"=rowSums(rPreserv18S[grep("Z.S.0[456]",colnames(rPreserv18S))]),"TQ.W"=rowSums(rPreserv18S[grep("Z.TQ[123].N",colnames(rPreserv18S))]),"TQ.S"=rowSums(rPreserv18S[grep("Z.S.0[789]",colnames(rPreserv18S))]))
rSedWater18SOTU <- data.frame("sample"=names(rSedWater18S),"OTUnum"=unname(apply(rSedWater18S,2,counter)))
#Turn names into conds
rSedWater18SOTU$site <- substr(rSedWater18SOTU$sample,1,2)
rSedWater18SOTU$cond <- as.factor(substr(rSedWater18SOTU$sample,4,4))
#Check the overlap of OTUs
overlap18S <- rSedWater18S[-1]
overlap18S[overlap18S>0] <- 1
PQ.18S.overlap <- table(as.factor(overlap18S$PQ.W),as.factor(overlap18S$PQ.S))[2,2]
TQ.18S.overlap <- table(as.factor(overlap18S$TQ.W),as.factor(overlap18S$TQ.S))[2,2]
TB.18S.overlap <- table(as.factor(overlap18S$TB.W),as.factor(overlap18S$TB.S))[2,2]
#now we plot the barplots
pdf(file="../figures/SedWater18S.pdf",width=3,height=6)
linemar<- max(rSedWater18SOTU$OTUnum)/250
barplot(rSedWater18SOTU$OTUnum,names.arg = rSedWater18SOTU$sample,col=1:7,las=2,ylim=c(0,1000),ylab="Number of OTUs")
rect(1.3,PQ.18S.overlap-linemar,3.7,PQ.18S.overlap+linemar,col="white",lty=0,border=FALSE)
rect(3.75,TB.18S.overlap-linemar,6.1,TB.18S.overlap+linemar,col="white",lty=0,border=FALSE)
rect(6.2,TQ.18S.overlap-linemar,9,TQ.18S.overlap+linemar,col="white",lty=0,border=FALSE)
dev.off()
#COI
#First lets compare sediment and water OTU number!
palette(c("#CC79A7","#56B4E9","#0072B2","#F0E442","#E69F00", "#00b886","#007857"))
rSedWaterCOI <- data.frame("HH.W"=rowSums(rPreservCOI[grep("L.HH[123].N",colnames(rPreservCOI))]),"PQ.W"=rowSums(rPreservCOI[grep("L.PQ[123].N",colnames(rPreservCOI))]),"PQ.S"=rowSums(rPreservCOI[grep("L.S.0[123]",colnames(rPreservCOI))]),"TB.W"=rowSums(rPreservCOI[grep("L.TB[123].N",colnames(rPreservCOI))]),"TB.S"=rowSums(rPreservCOI[grep("L.S.0[456]",colnames(rPreservCOI))]),"TQ.W"=rowSums(rPreservCOI[grep("L.TQ[123].N",colnames(rPreservCOI))]),"TQ.S"=rowSums(rPreservCOI[grep("L.S.0[789]",colnames(rPreservCOI))]))
rSedWaterCOIOTU <- data.frame("sample"=names(rSedWaterCOI),"OTUnum"=unname(apply(rSedWaterCOI,2,counter)))
#Turn names into conds
rSedWaterCOIOTU$site <- substr(rSedWaterCOIOTU$sample,1,2)
rSedWaterCOIOTU$cond <- as.factor(substr(rSedWaterCOIOTU$sample,4,4))
#Check the overlap of OTUs
overlapCOI <- rSedWaterCOI[-1]
overlapCOI[overlapCOI>0] <- 1
PQ.COI.overlap <- table(as.factor(overlapCOI$PQ.W),as.factor(overlapCOI$PQ.S))[2,2]
TQ.COI.overlap <- table(as.factor(overlapCOI$TQ.W),as.factor(overlapCOI$TQ.S))[2,2]
TB.COI.overlap <- table(as.factor(overlapCOI$TB.W),as.factor(overlapCOI$TB.S))[2,2]
#now we plot the barplots
pdf(file="../figures/SedWaterCOI.pdf",width=3,height=6)
linemar<- max(rSedWaterCOIOTU$OTUnum)/250
barplot(rSedWaterCOIOTU$OTUnum,names.arg = rSedWaterCOIOTU$sample,col=1:7,las=2,ylim=c(0,3000),ylab="Number of OTUs")
rect(1.3,PQ.COI.overlap-linemar,3.7,PQ.COI.overlap+linemar,col="white",lty=0,border=FALSE)
rect(3.75,TB.COI.overlap-linemar,6.1,TB.COI.overlap+linemar,col="white",lty=0,border=FALSE)
rect(6.2,TQ.COI.overlap-linemar,9,TQ.COI.overlap+linemar,col="white",lty=0,border=FALSE)
dev.off()
#proportion of unique OTUs
##THIS IS SHAMEFUL CODE
UniqueOTUprop <- cbind(rSedWater18SOTU[,1:2],rSedWaterCOIOTU[,2])[-1,]
UniqueOTUprop$unique18<- rep("NA",6)
UniqueOTUprop$unique18S[1] <- (UniqueOTUprop$OTUnum[1]-PQ.18S.overlap)/UniqueOTUprop$OTUnum[1]
UniqueOTUprop$unique18S[2] <- (UniqueOTUprop$OTUnum[2]-PQ.18S.overlap)/UniqueOTUprop$OTUnum[2]
UniqueOTUprop$unique18S[3] <- (UniqueOTUprop$OTUnum[3]-TB.18S.overlap)/UniqueOTUprop$OTUnum[3]
UniqueOTUprop$unique18S[4] <- (UniqueOTUprop$OTUnum[4]-TB.18S.overlap)/UniqueOTUprop$OTUnum[4]
UniqueOTUprop$unique18S[5] <- (UniqueOTUprop$OTUnum[5]-TQ.18S.overlap)/UniqueOTUprop$OTUnum[5]
UniqueOTUprop$unique18S[6] <- (UniqueOTUprop$OTUnum[6]-TQ.18S.overlap)/UniqueOTUprop$OTUnum[6]
UniqueOTUprop$uniqueCOI<- rep("NA",6)
UniqueOTUprop$uniqueCOI[1] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[1]-PQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[1]
UniqueOTUprop$uniqueCOI[2] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[2]-PQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[2]
UniqueOTUprop$uniqueCOI[3] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[3]-TB.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[3]
UniqueOTUprop$uniqueCOI[4] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[4]-TB.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[4]
UniqueOTUprop$uniqueCOI[5] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[5]-TQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[5]
UniqueOTUprop$uniqueCOI[6] <- (UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[6]-TQ.COI.overlap)/UniqueOTUprop$`rSedWaterCOIOTU[, 2]`[6]
mean(c(as.numeric(UniqueOTUprop$uniqueCOI[substr(UniqueOTUprop$sample,4,4)=="S"]),UniqueOTUprop$unique18S[substr(UniqueOTUprop$sample,4,4)=="S"]))
mean(c(as.numeric(UniqueOTUprop$uniqueCOI[substr(UniqueOTUprop$sample,4,4)=="W"]),UniqueOTUprop$unique18S[substr(UniqueOTUprop$sample,4,4)=="W"]))
##Now lets generate a dataset where the reps are not summed
##18S
rSedWater18SOTU_r <- data.frame("sample"=names(rPreserv18S),"OTUnum"=unname(apply(rPreserv18S,2,counter)))
#get rid of leading makrer name
rSedWater18SOTU_r$sample <- rSedWater18SOTU_r$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#annotate sediment samples with their real names
rSedWater18SOTU_r$sample[rSedWater18SOTU_r$sample %in% sedimentID$ID] <- as.character(sedimentID$Code[sedimentID$ID==rSedWater18SOTU_r$sample[rSedWater18SOTU_r$sample %in% sedimentID$ID]])
rSedWater18SOTU_r <-separate(rSedWater18SOTU_r,sample,into=c('site',"cond"))
rSedWater18SOTU_r$rep <- substr(rSedWater18SOTU_r$site,3,3)
rSedWater18SOTU_r$site <- substr(rSedWater18SOTU_r$site,1,2)
rSedWater18SOTU_r$site <- as.factor(rSedWater18SOTU_r$site)
rSedWater18SOTU_r$rep <- as.factor(rSedWater18SOTU_r$rep)
rSedWater18SOTU_r$cond <- as.factor(rSedWater18SOTU_r$cond)
rSedWater18SOTU_r <- rSedWater18SOTU_r[rSedWater18SOTU_r$site!="HH",]
##COI
rSedWaterCOIOTU_r <- data.frame("sample"=names(rPreservCOI),"OTUnum"=unname(apply(rPreservCOI,2,counter)))
#get rid of leading makrer name
rSedWaterCOIOTU_r$sample <- rSedWaterCOIOTU_r$sample %>%
{gsub("^[A-Z]*","",.)} %>%
{gsub("^[a-z]*[:.:]","",.)}
#annotate sediment samples with their real names
rSedWaterCOIOTU_r$sample[rSedWaterCOIOTU_r$sample %in% sedimentID$ID] <- as.character(sedimentID$Code[sedimentID$ID==rSedWaterCOIOTU_r$sample[rSedWaterCOIOTU_r$sample %in% sedimentID$ID]])
rSedWaterCOIOTU_r <-separate(rSedWaterCOIOTU_r,sample,into=c('site',"cond"))
rSedWaterCOIOTU_r$rep <- substr(rSedWaterCOIOTU_r$site,3,3)
rSedWaterCOIOTU_r$site <- substr(rSedWaterCOIOTU_r$site,1,2)
rSedWaterCOIOTU_r$site <- as.factor(rSedWaterCOIOTU_r$site)
rSedWaterCOIOTU_r$rep <- as.factor(rSedWaterCOIOTU_r$rep)
rSedWaterCOIOTU_r$cond <- as.factor(rSedWaterCOIOTU_r$cond)
rSedWaterCOIOTU_r <- rSedWaterCOIOTU_r[rSedWaterCOIOTU_r$site!="HH",]
#Statistics
#18S
##Test for normality under model
aov_residuals <- residuals(object =aov(OTUnum~cond*site,data=rSedWater18SOTU_r[rSedWater18SOTU_r$cond!="L",]))
shapiro.test(x = aov_residuals )
##Test
summary(aov(OTUnum~cond*site,data=rSedWater18SOTU_r[rSedWater18SOTU_r$cond!="L",]))
#COI
##Test for normality under model
aov_residuals <- residuals(object =aov(OTUnum~cond*site,data=rSedWaterCOIOTU_r[rSedWaterCOIOTU_r$cond!="L",]))
shapiro.test(x = aov_residuals )
##Test
summary(aov(OTUnum~cond*site,data=rSedWaterCOIOTU_r[rSedWaterCOIOTU_r$cond!="L",]))
View(rSedWater18SOTU_r)
